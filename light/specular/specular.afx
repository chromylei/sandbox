
technique [
    name = "specular"
    ps_main="ps_main"
    vs_main="vs_main"
    class_name="SpecularEffect"
           ];

struct PointLight {
  vec4 dir;
  vec4 diffuse;
  vec4 ambient;
};

struct Material {
  vec4 diffuse;
};

[uniform_func="SetPVW"] uniform mat4 pvw;
[uniform_func="SetWorld"] uniform mat4 world;
[uniform_func="SetMaterial"] uniform Material mtrl;
[uniform_func="SetPointLight"] uniform PointLight light;
[uniform_func="SetCameraPos"] uniform vec4 camera_pos;

exchange struct VsOutput {
  [semantic="position" system="true"]
  vec4 position;
  vec2 coordtex;
  vec4 normal;
  vec3 to_eye;
};

exchange struct VSInput {
  vec4 position;
  vec2 coordtex;
  vec4 normal;
};

VsOutput vs_main(VSInput input) {
  VsOutput o;
  o.position = pvw * input.position;
  o.coordtex = input.coordtex;
  o.normal = world * input.normal;
  o.to_eye = normalize((camera_pos - world * input.position).xyz);
  return o;
}

[system="true" semantic="target"]
vec4 ps_main(VsOutput o) {
  vec3 norm = normalize(o.normal.xyz);
  float diffuse_factor =
      clamp(dot(normalize(norm), -light.dir.xyz), 0.0, 1.0);
  vec3 light_factor = light.ambient.xyz + light.diffuse.xyz * diffuse_factor;

  vec3 reflect_dir = light.dir.xyz - 2 * dot(norm, light.dir.xyz) * norm;
  float specular_factor = dot(normalize(reflect_dir), o.to_eye);
  vec3 color = light_factor.xyz * mtrl.diffuse.xyz;
  color += specular_factor * mtrl.diffuse.xyz;
  return vec4(color, 1.0);
}

