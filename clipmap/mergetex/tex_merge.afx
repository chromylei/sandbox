
technique [
    name = "tex_merge"
    ps_main="ps_main"
    vs_main="vs_main"
    class_name="TexMergeEffect"
           ];

[uniform_func="SetHeightTex1"] uniform Texture2D heighttex1;
[uniform_func="SetHeightTex2"] uniform Texture2D heighttex2;
[uniform_func="SetHeightTex3"] uniform Texture2D heighttex3;
[uniform_func="SetHeightTex4"] uniform Texture2D heighttex4;
[uniform_func="SetViewpos"] uniform vec4 view_pos;

exchange struct VsOutput {
  [semantic="position" system="true"]
  vec4 position;
  vec2 texcoord;
};

exchange struct VSInput {
  vec4 position;
};

VsOutput vs_main(VSInput input) {
  VsOutput o;
  o.position = input.position;
  o.texcoord.x = input.position.x / 2.0 + 0.5;
  o.texcoord.y = (1.0 - input.position.y) / 2.0 + 0.5;
  return o;
}

[system="true" semantic="target"]
vec4 ps_main(VsOutput o) {
  vec2 texcoord = vec2(o.texcoord.x - view_pos.x, o.texcoord.y - view_pos.y);
  texcoord.x = texcoord.x - floor(texcoord.x);
  texcoord.y = texcoord.y - floor(texcoord.y);
  if (o.texcoord.x <= view_pos.x) {
    texcoord.x = 1 - view_pos.x + o.texcoord.x;
    if (o.texcoord.y <= view_pos.y) {
      texcoord.y = 1 - view_pos.y + o.texcoord.y;
      return sample2D(heighttex1, texcoord);
    } else {
      texcoord.y = o.texcoord.y - view_pos.y;
      return sample2D(heighttex4, texcoord);
    }
  } else {
    texcoord.x = o.texcoord.x - view_pos.x;
    if (o.texcoord.y <= view_pos.y) {
      texcoord.y = 1 - view_pos.y + o.texcoord.y;
      return sample2D(heighttex2, texcoord);
    } else {
      texcoord.y = o.texcoord.y - view_pos.y;
      return sample2D(heighttex3, texcoord);
    }
  }
}

